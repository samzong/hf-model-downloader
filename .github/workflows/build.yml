name: Build Application

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '0.0.1'

jobs:
  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-13] # macos-latest for Apple Silicon, macos-13 for Intel
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dmgbuild
    
    - name: Build application
      run: python build.py
    
    - name: List build directory
      run: ls -R dist/
    
    - name: Create DMG for macOS
      run: |
        cd dist
        # Determine architecture based on runner
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          ARCH="arm64"
        else
          ARCH="x86_64"
        fi
        
        for d in *.app; do
          mv "$d" "HF Model Downloader.app"
          echo 'from dmgbuild import *' > settings.py
          echo 'format = "UDBZ"' >> settings.py
          echo 'files = ["HF Model Downloader.app"]' >> settings.py
          echo 'symlinks = { "Applications": "/Applications" }' >> settings.py
          echo 'badge_icon = "HF Model Downloader.app/Contents/Resources/icon-windowed.icns"' >> settings.py
          echo 'icon_locations = {' >> settings.py
          echo '    "HF Model Downloader.app": (140, 120),' >> settings.py
          echo '    "Applications": (500, 120)' >> settings.py
          echo '}' >> settings.py
          
          dmgbuild -s settings.py "HF Model Downloader" "hf-model-downloader-${ARCH}.dmg"
        done
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: hf-model-downloader-macos-${{ matrix.os }}-${ARCH}
        path: |
          dist/*.dmg
        if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build application
      run: python build.py
    
    - name: List build directory
      run: dir dist
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: hf-model-downloader-windows-x64
        path: dist/*.exe
        if-no-files-found: error

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/tags/v* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "version=$(date +'%Y.%m.%d')-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        
    - name: Flatten directory structure
      run: |
        cd dist
        find . -type f -name "*.dmg" -o -name "*.exe" -exec mv {} . \;
        rm -rf */
    
    - name: List downloaded artifacts
      run: ls -R dist/
    
    - name: Create Release Notes
      run: |
        echo "# HF Model Downloader v${{ steps.get_version.outputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "- Windows (x64)" >> release_notes.md
        echo "- macOS Intel (x86_64)" >> release_notes.md
        echo "- macOS Apple Silicon (arm64)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Changes" >> release_notes.md
        echo "- Latest build from ${{ github.sha }}" >> release_notes.md
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Version ${{ steps.get_version.outputs.version }}
        tag_name: v${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 