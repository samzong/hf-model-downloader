name: Semantic Release

permissions:
  contents: write
  id-token: write

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: macos-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || github.token }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release dmgbuild
          pip install -r requirements.txt
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Python Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
        run: |
          # Check what version would be released
          NEXT_VERSION=$(semantic-release version --print)
          echo "Next version would be: $NEXT_VERSION"
          
          # Execute the actual release
          semantic-release version
          
          # Set outputs for dependent jobs
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if release was actually created by checking if tag exists
          if git tag --list "v$NEXT_VERSION" | grep -q "v$NEXT_VERSION"; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "✅ Release v$NEXT_VERSION created successfully"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "❌ No release was created"
          fi
  
  update-homebrew:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN || github.token }}
      
      - name: Update Homebrew Cask
        env:
          GH_PAT: ${{ secrets.GH_TOKEN || github.token }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          echo "Updating Homebrew for version: $VERSION"
          make update-homebrew
            